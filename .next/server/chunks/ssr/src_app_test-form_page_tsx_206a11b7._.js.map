{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Jehan/Desktop/react%20projects/BinaryBandits_hackelite2.0/src/app/test-form/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState } from 'react';\r\nimport { TextField, Box, Typography, Paper } from '@mui/material';\r\n\r\nexport default function TestFormPage() {\r\n  const [testValue, setTestValue] = useState('');\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 4, maxWidth: 600, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" sx={{ mb: 3, color: 'black' }}>\r\n        Test Form Input Visibility\r\n      </Typography>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n          Simple Test Input\r\n        </Typography>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Test Input\"\r\n          value={testValue}\r\n          onChange={(e) => setTestValue(e.target.value)}\r\n          sx={{ \r\n            mb: 3,\r\n            '& .MuiInputBase-input': {\r\n              color: 'black !important',\r\n              backgroundColor: 'white',\r\n            },\r\n            '& .MuiInputLabel-root': {\r\n              color: 'gray',\r\n            },\r\n            '& .MuiOutlinedInput-root': {\r\n              backgroundColor: 'white',\r\n            }\r\n          }}\r\n        />\r\n        <Typography sx={{ color: 'black' }}>\r\n          Current value: \"{testValue}\" (Length: {testValue.length})\r\n        </Typography>\r\n      </Paper>\r\n      \r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n          Form Data Test\r\n        </Typography>\r\n        \r\n        <TextField\r\n          fullWidth\r\n          label=\"Name\"\r\n          name=\"name\"\r\n          value={formData.name}\r\n          onChange={handleChange}\r\n          sx={{ \r\n            mb: 2,\r\n            '& .MuiInputBase-input': {\r\n              color: 'black !important',\r\n            },\r\n          }}\r\n        />\r\n        \r\n        <TextField\r\n          fullWidth\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          sx={{ \r\n            mb: 2,\r\n            '& .MuiInputBase-input': {\r\n              color: 'black !important',\r\n            },\r\n          }}\r\n        />\r\n        \r\n        <TextField\r\n          fullWidth\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n          sx={{ \r\n            mb: 2,\r\n            '& .MuiInputBase-input': {\r\n              color: 'black !important',\r\n            },\r\n          }}\r\n        />\r\n        \r\n        <Typography sx={{ color: 'black', mt: 2 }}>\r\n          Form Data: {JSON.stringify(formData, null, 2)}\r\n        </Typography>\r\n      </Paper>\r\n      \r\n      <Typography variant=\"body2\" sx={{ mt: 2, color: 'gray' }}>\r\n        Type something in the inputs above to test visibility and state management.\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACvC,MAAM;QACN,OAAO;QACP,UAAU;IACZ;IAEA,MAAM,eAAe,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM;QAChC,YAAY,CAAC,OAAS,CAAC;gBAAE,GAAG,IAAI;gBAAE,CAAC,KAAK,EAAE;YAAM,CAAC;IACnD;IAEA,qBACE,8OAAC,wLAAA,CAAA,MAAG;QAAC,IAAI;YAAE,GAAG;YAAG,UAAU;YAAK,IAAI;QAAO;;0BACzC,8OAAC,6MAAA,CAAA,aAAU;gBAAC,SAAQ;gBAAK,IAAI;oBAAE,IAAI;oBAAG,OAAO;gBAAQ;0BAAG;;;;;;0BAIxD,8OAAC,8LAAA,CAAA,QAAK;gBAAC,IAAI;oBAAE,GAAG;oBAAG,IAAI;gBAAE;;kCACvB,8OAAC,6MAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAK,IAAI;4BAAE,IAAI;wBAAE;kCAAG;;;;;;kCAGxC,8OAAC,0MAAA,CAAA,YAAS;wBACR,SAAS;wBACT,OAAM;wBACN,OAAO;wBACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;wBAC5C,IAAI;4BACF,IAAI;4BACJ,yBAAyB;gCACvB,OAAO;gCACP,iBAAiB;4BACnB;4BACA,yBAAyB;gCACvB,OAAO;4BACT;4BACA,4BAA4B;gCAC1B,iBAAiB;4BACnB;wBACF;;;;;;kCAEF,8OAAC,6MAAA,CAAA,aAAU;wBAAC,IAAI;4BAAE,OAAO;wBAAQ;;4BAAG;4BACjB;4BAAU;4BAAY,UAAU,MAAM;4BAAC;;;;;;;;;;;;;0BAI5D,8OAAC,8LAAA,CAAA,QAAK;gBAAC,IAAI;oBAAE,GAAG;gBAAE;;kCAChB,8OAAC,6MAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAK,IAAI;4BAAE,IAAI;wBAAE;kCAAG;;;;;;kCAIxC,8OAAC,0MAAA,CAAA,YAAS;wBACR,SAAS;wBACT,OAAM;wBACN,MAAK;wBACL,OAAO,SAAS,IAAI;wBACpB,UAAU;wBACV,IAAI;4BACF,IAAI;4BACJ,yBAAyB;gCACvB,OAAO;4BACT;wBACF;;;;;;kCAGF,8OAAC,0MAAA,CAAA,YAAS;wBACR,SAAS;wBACT,OAAM;wBACN,MAAK;wBACL,OAAO,SAAS,KAAK;wBACrB,UAAU;wBACV,IAAI;4BACF,IAAI;4BACJ,yBAAyB;gCACvB,OAAO;4BACT;wBACF;;;;;;kCAGF,8OAAC,0MAAA,CAAA,YAAS;wBACR,SAAS;wBACT,OAAM;wBACN,MAAK;wBACL,MAAK;wBACL,OAAO,SAAS,QAAQ;wBACxB,UAAU;wBACV,IAAI;4BACF,IAAI;4BACJ,yBAAyB;gCACvB,OAAO;4BACT;wBACF;;;;;;kCAGF,8OAAC,6MAAA,CAAA,aAAU;wBAAC,IAAI;4BAAE,OAAO;4BAAS,IAAI;wBAAE;;4BAAG;4BAC7B,KAAK,SAAS,CAAC,UAAU,MAAM;;;;;;;;;;;;;0BAI/C,8OAAC,6MAAA,CAAA,aAAU;gBAAC,SAAQ;gBAAQ,IAAI;oBAAE,IAAI;oBAAG,OAAO;gBAAO;0BAAG;;;;;;;;;;;;AAKhE","debugId":null}}]
}